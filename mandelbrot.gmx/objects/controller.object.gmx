<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_enable_alphablend(false);
draw_set_alpha_test(false);
math_set_epsilon(0);
gml_release_mode(true);

x = -2;
y = -2;
x_width = 4;
y_width = 4;
done = true;
surf_show = surface_create(room_width, room_height);
mandel_grid =   ds_grid_create(room_width, room_height);
zr_grid =       ds_grid_create(room_width, room_height);
zi_grid =       ds_grid_create(room_width, room_height);
cr_grid =       ds_grid_create(room_width, room_height);
ci_grid =       ds_grid_create(room_width, room_height);


var ix_width = surface_get_width(surf_show);
var iy_width = surface_get_height(surf_show);
var ix, iy;
for (ix = 0; ix &lt; ix_width; ix++)
{
    for (iy = 0; iy &lt; iy_width; iy++)
    {   
        cr_grid[# ix, iy] = x + ix/ix_width*x_width;
        ci_grid[# ix, iy] = y + iy/iy_width*y_width;
        zr_grid[# ix, iy] = 0;
        zi_grid[# ix, iy] = 0;
    }
}
it_step = 16;
n_it = 8;
n_it_min = 0;
start_x = 0;
start_time = get_timer();

moving = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ix_width = surface_get_width(surf_show);
var iy_width = surface_get_height(surf_show);
var ix, iy, it;
for (ix = start_x; ix &lt; ix_width; ix++)
{
    for (iy = 0; iy &lt; iy_width; iy++)
    {   
        if (mandel_grid[# ix, iy] != 0)
            continue;
        done = false;
        var cr = cr_grid[# ix, iy];
        var ci = ci_grid[# ix, iy];
        var zr = zr_grid[# ix, iy];
        var zi = zi_grid[# ix, iy];
        var zrsqr = zr*zr;
        var zisqr = zi*zi;
        for (it = 0; it &lt; it_step; it++)
        {
            if (zrsqr + zisqr &gt; 4.0)
            {
                mandel_grid[# ix, iy] = it+n_it;
                break;
            }
            zi = power(zr + zi, 2) - zrsqr - zisqr;
            zi += ci;
            zr = zrsqr - zisqr + cr;
            zrsqr = power(zr, 2);
            zisqr = power(zi, 2);
        }
        zr_grid[# ix, iy] = zr;
        zi_grid[# ix, iy] = zi;
    }
    if (get_timer() &gt; (start_time+50000))
    {
        start_time = get_timer();
        start_x = ix+1;
        exit;
    }
}

if (!done)
{
    done = true;
    n_it += it_step;
    it_step = 16;
    surface_set_target(surf_show);
    draw_clear(c_black);
    for (ix = 0; ix &lt; ix_width; ix++)
    {
        for (iy = 0; iy &lt; iy_width; iy++)
        {   
            if (mandel_grid[# ix, iy] != 0)
            {
                draw_point_colour(ix, iy, make_colour_hsv(255-(mandel_grid[# ix, iy]-n_it_min)/(n_it-n_it_min)*255, 255, 255));//merge_colour(c_white, c_dkgray, logn(mandel_grid[# ix, iy])/ln(n_it)));
            }
        }
    }
    surface_reset_target();
    start_x = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (moving == 1)
{   
    var ix_width = surface_get_width(surf_show);
    var iy_width = surface_get_height(surf_show);
    var ix, iy; 
    it_step = 5000;
    
    show_debug_message(floor((new_x-x)/x_width*ix_width-1));
    show_debug_message(ceil((new_x-x+(x+(mouse_x/room_width)*x_width - new_x))/x_width*ix_width+1));
    for (ix = floor((new_x-x)/x_width*ix_width-1); ix &lt; ceil((new_x-x+(x+(mouse_x/room_width)*x_width - new_x))/x_width*ix_width+1); ix++)
    {
        for (iy = floor((new_y-y)/y_width*iy_width-1); iy &lt; ceil((new_y-y+(x+(mouse_x/room_width)*x_width - new_x))/y_width*iy_width+1); iy++)
        {   
            if (mandel_grid[# ix, iy] != 0) &amp;&amp; (mandel_grid[# ix, iy] &lt; it_step)
                it_step = mandel_grid[# ix, iy];
        }
    }
    if (it_step == 5000)
    {
        for (ix = 0; ix &lt; ix_width; ix++)
        {
            for (iy = 0; iy &lt; iy_width; iy++)
            {   
                if (mandel_grid[# ix, iy] != 0) &amp;&amp; (mandel_grid[# ix, iy] &lt; it_step)
                    it_step = mandel_grid[# ix, iy];
            }
        }
    }
    n_it = 0;
    n_it_min = it_step;
    
    x_width = x+(mouse_x/room_width)*x_width - new_x;
    y_width = x_width;
    x = new_x;
    y = new_y;
    start_x = 0;
    
    for (ix = 0; ix &lt; ix_width; ix++)
    {
        for (iy = 0; iy &lt; iy_width; iy++)
        {   
            cr_grid[# ix, iy] = x + ix/ix_width*x_width;
            ci_grid[# ix, iy] = y + iy/iy_width*y_width;
            zr_grid[# ix, iy] = 0;
            zi_grid[# ix, iy] = 0;
            mandel_grid[# ix, iy] = 0;
        }
    }
}

moving = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moving = 1;
new_right_draw = mouse_x;
new_top_draw = mouse_y;
new_x = x+(mouse_x/room_width)*x_width;
new_y = y+(mouse_y/room_height)*y_width;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha_test(false);
    draw_surface(surf_show, x, y);
draw_set_alpha_test(true);

draw_set_colour(c_white);
draw_set_font(fnt_default);
draw_text(10, 10, string(start_x/room_width*100)+"%");
draw_text(10, 30, string(n_it));
draw_text(10, 50, string_format(x,1,14));
draw_text(10, 70, string_format(y,1,14));
draw_text(10, 90, string_format(x_width,1,14));
draw_text(10, 110, string_format(y_width,1,14));

if (moving == 1)
{
    draw_rectangle(new_right_draw, new_top_draw, mouse_x, new_top_draw+mouse_x-new_right_draw, 1);
}
draw_set_colour(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
